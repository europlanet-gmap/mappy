# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MappyDockWidget
                                 A QGIS plugin
 helper for consistent goelogical map generation
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-06-24
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Luca Penasa, PLANMAP and GMAP team
        email                : luca.penasa@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
from typing import List, Tuple

from qgis.PyQt import QtWidgets, uic, QtCore
from qgis.PyQt.QtCore import pyqtSignal
from qgis.PyQt.QtWidgets import QFileDialog, QLineEdit, QCheckBox
from qgis._core import QgsMessageLog
from qgis.core import QgsCategorizedSymbolRenderer
from qgis.gui import QgsMapLayerComboBox, QgsFieldComboBox, QgsDoubleSpinBox
from qgis.core import QgsProject, QgsMapLayerProxyModel, QgsSymbol, QgsRendererCategory, \
    QgsVectorLayer


import logging as log


from pathlib import Path


# from qgis.gui import QgsMapLayerComboBox

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'qgismappy_dockwidget_base.ui'))




class MappyDockWidget(QtWidgets.QDockWidget, FORM_CLASS):
    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(MappyDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.log_message("Initializing Mappy")
        self.initConstruct()

    def getUserHome(self):
        return str(Path.home())

    def initConstruct(self):
        self.lines.setFilters(QgsMapLayerProxyModel.LineLayer)
        self.points.setFilters(QgsMapLayerProxyModel.PointLayer)
        self.output.lineEdit().setText(f"{self.getUserHome()}/geomap.gpkg")
        self.output.setFilter('*.gpkg')



    def log_message(self, message, level=0, notifyUser=True):
        QgsMessageLog.logMessage(message, "Mappy", level, notifyUser)

    def on_points_layerChanged(self, layer):
        self.units_field.setLayer(layer)

    def on_de_map_layer_layerChanged(self, layer):
        self.de_units_field.setLayer(layer)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    # @QtCore.pyqtSlot()
    # def on_save_as_clicked(self):
    #     self.log_message("save as clicked", notifyUser=1)
    #     filename, ext = QFileDialog.getSaveFileName(self, "Select output file ", "", )
    #     if filename[-5:] == ".gpkg":
    #         filename = filename[:-5]
    #
    #     self.log_message(filename)
    #     self.log_message(ext)
    #     if filename:
    #         self.output.setText(filename + ext[1:])





    # def readParametersToDict(self, mapping: List[Tuple]):
    #     out = {}
    #     for widget_name, parameter_name in mapping:
    #         value = self.readWidgetContent(getattr(self, widget_name))
    #         out[parameter_name] = value
    #
    #     return out




